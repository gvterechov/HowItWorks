<% title t('algorithms.index.title') %>

<%= render partial: 'algorithms/show_task/header' %>

<!-- <script src="https://unpkg.com/blockly/blockly.min.js"></script> -->
<%= render partial: 'algorithms/common/algorithm_style' %>

<input type="hidden" id="lang" value="<%= I18n.locale %>">
<input type="hidden" id="task_lang" value="<%= @task_lang %>">

<div class="ui aligned basic segment">
  <div class="ui form" id="algorithm_trainer">
    <!--  'algorithms/common/algorithm_text_field' -->
    <%= render partial: 'algorithms/show_task/algorithm_trainer_beta',
               locals: {
                 data: @result,
                 task_lang: @task_lang
               }
    %>
    <%#= render partial: 'algorithms/common/trace_field', locals: { data: @result } %>
  </div>
</div>

<%#= render partial: 'common/footer' %>

<%= render partial: 'algorithms/common/success_modal' %>

<%= render partial: 'algorithms/show_task/student_first_modal' %>
<%= render partial: 'algorithms/show_task/student_second_modal' %>


<!-- Paper -->
<canvas id="paper_canvas" class="canvas"></canvas>

<script type="text/paperscript" canvas="paper_canvas" src="/static/paper/paper-canvas.js"> </script>

<script type="text/javascript" src="/static/paper/paper-full.min.js"></script>

<script type="text/javascript" src="/static/paper/diagram.js"> </script>
<script type="text/javascript" src="/static/paper/activity-vis.js"> </script>
<!-- /Paper -->

<%= render partial: 'algorithms/show_task/show_task_script' %>

<script>
  $(function() {
	  paper_on_load();
  });

    function on_solve_step(is_final) {
    	draw_diagram();
    }

    // paper

    function draw_diagram() {
        // paper
        let algorithm_json = JSON.parse($('#algorithm_json').val());
        let existing_trace_json = JSON.parse($('#existing_trace_json').val());
        const elem = $('#diagram_area');
        const pos = elem.offset();
        const width = elem.width();
        const height = elem.height();
        // console.log("pos:", pos);
        const point = [pos.left, pos.top];
        const size = [width, height];

        redraw_activity_diagram(algorithm_json, existing_trace_json, {viewport: {point, size}});
        // /paper
    }

    function paper_on_load() {
	    if (!window.globals || !window.globals.paper_init) {
		    setTimeout(paper_on_load, 200);
	    	console.log("Waiting for paperscript loaded ...")
	    	return;
	    }

		console.log("paper_on_load() ...")
        window.globals.paper_init();
        diagram_init();
		console.log("paper_on_load() OK.")

		// отрисовать диаграмму в первый раз
		draw_diagram();

		// /// test canvas
		// var myCircle = new paper.Path.Circle(new paper.Point(600, 170), 150);
		// myCircle.fillColor = 'black';
		// // console.log(myCircle);
    }

    // /paper

</script>
